"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[436],{1865:t=>{t.exports=JSON.parse('{"functions":[{"name":"Update","desc":"  \\nUpdates the state by checking the state condition function, and sets the active property","params":[{"name":"self","desc":"","lua_type":"State"}],"returns":[],"function_type":"static","source":{"line":57,"path":"src/shared/Omega/State.lua"}}],"properties":[{"name":"Priority","desc":"The priority index of the state","lua_type":"number","source":{"line":34,"path":"src/shared/Omega/State.lua"}},{"name":"StateConditionFunction","desc":"The function that is used to figure out if the State is active","lua_type":"() -> boolean","source":{"line":38,"path":"src/shared/Omega/State.lua"}},{"name":"NPC","desc":"The npc associated with the state","lua_type":"NPC","source":{"line":42,"path":"src/shared/Omega/State.lua"}},{"name":"Active","desc":"Determines whether the State is active or not","lua_type":"boolean","source":{"line":46,"path":"src/shared/Omega/State.lua"}}],"types":[],"name":"State","desc":"A state is, well, a state that an NPC can run on. In Omega, we use a sort of \\"State Machine\\" kind of coding style. This means that everything is a state, not just being stunned, or something that is tempoary.\\nSo Walking, and running would be an Indivisual State. To define what state the NPC is in, each state has a ConditionFunction.\\nThis is a function assosiated with the state, and if the ConditionFunction returns true, the state is active\\nThan, to determine what state an NPC is in, it goes through a priority list, and if a state is active, than the state is the selected one.\\n\\nExample:\\n```\\nStunned\\nRunning\\nWalking\\n```\\n\\nIf the Stunned State has a condition function of touching a bullet, and it was touching a bullet, than it would be stunned.\\nBut if the running condition function is also active, Runnning would not activate because it is behind the Stunned State.","source":{"line":30,"path":"src/shared/Omega/State.lua"}}')}}]);